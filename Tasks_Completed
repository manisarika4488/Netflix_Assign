# Import and start spark session

from pyspark.sql import SparkSession
from pyspark.sql.functions import row_number
from pyspark.sql.window import Window

Create SparkSession with specified configuration
spark = SparkSession.builder.appName("First PySpark Session").master("local[*]").getOrCreate()

#Load titles_df DataFrame from CSV file
titles = spark.read.option("header", True).csv(""/content/raw_titles.csv"")
titles.show()
titles.printSchema()

credits = spark.read.option("header", True).csv("/content/raw_credits.csv")
credits.show()
credits.printSchema()

# Analyze the Top rated Show and the actor that acted in it based on the year
rated_show = credits_df.join(titles_df, "id").filter((credits_df["role"] == "ACTOR") & (titles_df["imdb_score"].isNotNull()) & (titles_df["type"] == "SHOW")).select("name", "role", "title", "type", "release_year", "imdb_score").withColumn("Rank", row_number().over(Window.partitionBy("release_year").orderBy("imdb_score"))).orderBy("release_year", "Rank")

#Select top rated movie for each year
list_ratedlist = list_top movie rated.filter("Rank < 2").orderBy("release_year", "Rank")
list_ratedlist .show(36)

# Analyze the Top rated Movie and the actor that acted in it based on the year
top_movie_rated = credits_df.join(titles_df, "id").filter((credits_df["role"] == "ACTOR") & (titles_df["imdb_score"].isNotNull()) & (titles_df["type"] == "MOVIE")).select("name", "role", "title", "type", "release_year", "imdb_score").withColumn("Rank", row_number().over(Window.partitionBy("release_year").orderBy("imdb_score"))).orderBy("release_year", "Rank")

#Select top rated show for each year
rated_showlist = top_rated_show.filter("Rank < 2").orderBy("release_year", "Rank")
top_rated_show_list.show(56)
